def reportExclusion = [
        '**/databinding/**/*.*',
        '**/android/databinding/*Binding.*',
        '**/BR.*',
        '**/R.*',
        '**/R$*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*_MembersInjector.*',
        '**/Dagger*Component.*',
        '**/Dagger*Component$Builder.*',
        '**/*Module_*Factory.*',
        '**/*Module*.*'
]

def validationExclusion = [
        '*Fragment*',
        '*Activity*',
        '*Adapter*',
        '*ViewPager*',
        '*View*',
        '*ViewGroup*',
        '*Layout*',
        '*ViewHolder*',
]

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        html.required = true
        csv.required = true
        xml.required = true
    }

    def javaBuildTree = fileTree(
            dir: "build/intermediates/javac/debug/",
            excludes: reportExclusion
    )
    def kotlinBuildTree = fileTree(
            dir: "build/tmp/kotlin-classes/debug/",
            excludes: reportExclusion
    )
    def javaMainSrc = "${project.projectDir}/src/main/java/"
    def kotlinMainSrc = "${project.projectDir}/src/main/kotlin/"
    sourceDirectories.from = files([javaMainSrc, kotlinMainSrc])
    classDirectories.from = files([javaBuildTree, kotlinBuildTree])
    executionData.from = files("${project.buildDir}/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec")
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'testDebugUnitTest') {

    group = "Verification"
    description = "Assert minumun coverage in the project."

    sourceDirectories.setFrom jacocoTestReport.sourceDirectories
    classDirectories.setFrom jacocoTestReport.classDirectories
    executionData.setFrom jacocoTestReport.executionData

    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                minimum = 0.5
            }
            excludes = validationExclusion
        }
    }
}


check.dependsOn jacocoTestCoverageVerification

android.testOptions {
    unitTests.all {
        jacoco {
            includeNoLocationClasses = true
            excludes = ['jdk.internal.*']
        }
    }
}


